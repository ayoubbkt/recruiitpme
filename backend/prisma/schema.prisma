// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  passwordHash      String
  firstName         String
  lastName          String
  companyName       String
  emailVerified     Boolean   @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLogin         DateTime?

  // Relations
  company             Company?                 // Ajoutez cette ligne - relation vers Company
  notificationPreferences NotificationPreference?
  jobs         Job[]
  notes        Note[]
  interviews   Interview[]  @relation("Interviewer")
  candidates   Candidate[]  // Relation to candidates created by this user
  
  @@map("users")
}

model Company {
  id          String   @id @default(uuid())
  address     String?
  phone       String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relation vers User
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// Nouveau modèle pour les préférences de notification
model NotificationPreference {
  id                    String   @id @default(uuid())
  emailNewCandidates    Boolean  @default(true)
  emailInterviews       Boolean  @default(true)
  emailWeeklyDigest     Boolean  @default(false)
  appNotificationsEnabled Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relation vers User
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Job {
  id              String   @id @default(uuid())
  title           String
  description     String
  location        String
  contractType    String   // CDI, CDD, Stage, etc.
  salary          String?
  skills          String[] // Array of required skills
  experienceLevel String   // junior, intermediate, senior
  languages       String?
  startDate       DateTime?
  pipelineStages  String[] // Custom stages for this job
  status          String   // active, draft, closed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId     String     // Creator of the job
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  candidates Candidate[]
  interviews Interview[]

  @@map("jobs")
}

model Candidate {
  id           String   @id @default(uuid())
  name         String
  email        String?
  phone        String?
  resumeUrl    String   // Path to the stored CV file
  skills       String[] // Skills extracted from CV
  experience   Int?     // Years of experience
  education    String?
  matchingScore Float    // Score calculated based on job matching
  status       String   // new, toContact, interview, hired, rejected
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  jobId       String
  job         Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId      String      // User who added this candidate
  user        User        @relation(fields: [userId], references: [id])
  notes       Note[]
  interviews  Interview[]

  @@map("candidates")
}

model Note {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Interview {
  id              String    @id @default(uuid())
  date            DateTime
  time            String    // Stocke l'heure au format "HH:MM"
  interviewerName String    // Stocke le nom saisi dans le formulaire
  videoLink       String?   // Lien de visioconférence
  location        String?   // Emplacement physique (si différent de videoLink)
  notes           String?
  status          String    // scheduled, completed, canceled, noShow
  feedback        String?   // Compte-rendu d'entretien (ajouté après l'entretien)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  candidateId    String
  candidate      Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobId          String
  job            Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  interviewerId  String
  user           User      @relation("Interviewer", fields: [interviewerId], references: [id])
}