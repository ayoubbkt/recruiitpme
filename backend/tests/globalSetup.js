// Configuration globale avant l'ex√©cution de tous les tests
const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

module.exports = async () => {
  console.log('üöÄ Configuration globale des tests...');
  
  // Configurer la base de donn√©es de test
  process.env.DATABASE_URL = process.env.TEST_DATABASE_URL || 'postgresql://postgres:password@localhost:5432/recruitpme_test';
  
  // S'assurer que le r√©pertoire d'uploads existe
  const uploadsDir = path.join(__dirname, '../uploads/cvs');
  if (!fs.existsSync(uploadsDir)) {
    fs.mkdirSync(uploadsDir, { recursive: true });
    console.log('üìÅ R√©pertoire d\'uploads cr√©√©:', uploadsDir);
  }
  
  // Cr√©er un r√©pertoire pour les logs de test
  const logsDir = path.join(__dirname, '../logs');
  if (!fs.existsSync(logsDir)) {
    fs.mkdirSync(logsDir, { recursive: true });
    console.log('üìÅ R√©pertoire de logs cr√©√©:', logsDir);
  }
  
  // Cr√©er une connexion Prisma pour les tests
  const prisma = new PrismaClient();
  
  try {
    // Test de connexion √† la base de donn√©es
    await prisma.$connect();
    console.log('‚úÖ Connexion √† la base de donn√©es de test √©tablie');
    
    // Nettoyer la base de donn√©es de test (selon les besoins)
    // Il est g√©n√©ralement pr√©f√©rable de laisser chaque suite de tests g√©rer ses propres donn√©es
    // mais nous pouvons effectuer certains nettoyages globaux ici
    
    console.log('üßπ Nettoyage global de la base de donn√©es termin√©');
  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration des tests:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
  
  console.log('‚úÖ Configuration globale des tests termin√©e');
};